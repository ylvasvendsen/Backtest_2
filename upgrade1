import pandas as pd
import pandas_ta as ta

df = pd.read_csv("AAPL.csv")


df=df[df.High!=df.Low]
df.reset_index(inplace=True, drop=True)


# Calculate Bollinger Bands and RSI using pandas_ta
df.ta.bbands(append=True, length=30, std=2)
df.ta.rsi(append=True, length=14)
df["atr"] = ta.atr(low = df.Low, close = df.Close, high = df.High, length=14)

# Rename columns for clarity if necessary
df.rename(columns={
    'BBL_30_2.0': 'bbl', 'BBM_30_2.0': 'bbm', 'BBU_30_2.0': 'bbh', 'RSI_14': 'rsi'
}, inplace=True)

# Calculate Bollinger Bands Width
df['bb_width'] = (df['bbh'] - df['bbl']) / df['bbm']
df


df.describe()


def apply_total_signal(df, rsi_threshold_low=20, rsi_threshold_high=80, bb_width_threshold=0.0015):
  """
  This function adds a 'TotalSignal' column to the DataFrame based on RSI, Bollinger Bands, and price conditions.

  Args:
      df: The pandas DataFrame containing price, RSI, and Bollinger Band data.
      rsi_threshold_low: The lower RSI threshold for a buy signal.
      rsi_threshold_high: The upper RSI threshold for a sell signal.
      bb_width_threshold: The minimum Bollinger Band width for a signal.

  Returns:
      The modified DataFrame with the 'TotalSignal' column.
  """

  # Initialize the 'TotalSignal' column
  df['TotalSignal'] = 0

  for i in range(1, len(df)):
    # Previous candle conditions
    prev_candle_closes_below_bb = df['Close'].iloc[i-1] < df['bbl'].iloc[i-1]
    prev_rsi_below_thr = df['rsi'].iloc[i-1] < rsi_threshold_low

    # Current candle conditions
    closes_above_prev_high = df['Close'].iloc[i] > df['High'].iloc[i-1]
    bb_width_greater_threshold = df['bb_width'].iloc[i] > bb_width_threshold

    # Combine conditions for buy signal
    buy_condition = prev_candle_closes_below_bb & prev_rsi_below_thr & closes_above_prev_high & bb_width_greater_threshold

    # Previous candle conditions
    prev_candle_closes_above_bb = df['Close'].iloc[i-1] > df['bbh'].iloc[i-1]
    prev_rsi_above_thr = df['rsi'].iloc[i-1] > rsi_threshold_high

    # Current candle conditions
    closes_below_prev_low = df['Close'].iloc[i] < df['Low'].iloc[i-1]

    # Combine conditions for sell signal
    sell_condition = prev_candle_closes_above_bb & prev_rsi_above_thr & closes_below_prev_low & bb_width_greater_threshold

    # Set signals based on conditions
    df.at[i, 'TotalSignal'] = 2 if buy_condition.all() else (1 if sell_condition.all() else 0)

  return df

apply_total_signal(df=df, rsi_threshold_low=20, rsi_threshold_high=80, bb_width_threshold=0.001)


len(df[df.TotalSignal != 0])


import numpy as np
def pointpos(x):
    if x['TotalSignal']==2:
        return x['Low']-1e-4
    elif x['TotalSignal']==1:
        return x['High']+1e-4
    else:
        return np.nan

df['pointpos'] = df.apply(lambda row: pointpos(row), axis=1)


import plotly.graph_objects as go
from plotly.subplots import make_subplots
from datetime import datetime
st=0
dfpl = df[st:st+350]#.set_index("Gmt time")
# Create a plot with 2 rows
fig = make_subplots(rows=2, cols=1)

# Add candlestick plot on the first row
fig.add_trace(go.Candlestick(x=dfpl.index,
                             open=dfpl['Open'],
                             high=dfpl['High'],
                             low=dfpl['Low'],
                             close=dfpl['Close']),
              row=1, col=1)

# Add Bollinger Bands, EMA lines on the same subplot
fig.add_trace(go.Scatter(x=dfpl.index, y=dfpl['bbl'],
                         line=dict(color='green', width=1),
                         name="BBL"),
              row=1, col=1)
fig.add_trace(go.Scatter(x=dfpl.index, y=dfpl['bbh'],
                         line=dict(color='green', width=1),
                         name="BBU"),
              row=1, col=1)

# Add markers for trade entry points on the same subplot
fig.add_trace(go.Scatter(x=dfpl.index, y=dfpl['pointpos'], mode="markers",
                         marker=dict(size=8, color="MediumPurple"),
                         name="entry"),
              row=1, col=1)

# Add markers for trade entry points on the same subplot
fig.add_trace(go.Scatter(x=dfpl.index, y=dfpl['rsi'], 
                         line=dict(color='green', width=2),
                         name="BBU"),
              row=2, col=1)

fig.update_layout(width=1200, height=800, sliders=[])
fig.show()


from backtesting import Strategy
from backtesting import Backtest

dfopt = df[0:10000]
def SIGNAL():
    return dfopt.TotalSignal

class MyStrat(Strategy):
    mysize = 0.03
    slcoef = 3
    TPcoef = 2
    
    def init(self):
        super().init()
        self.signal1 = self.I(SIGNAL)

    def next(self):
        super().next()
        slatr = self.slcoef*self.data.atr[-1]
        tpatr = self.TPcoef*self.data.atr[-1]
    
        if self.signal1==2 and len(self.trades)==0:
            sl1 = self.data.Close[-1] - slatr
            tp1 = self.data.Close[-1] + tpatr
            self.buy(sl=sl1, tp=tp1, size=self.mysize)

        if self.signal1==1 and len(self.trades)==0:
            sl1 = self.data.Close[-1] + slatr
            tp1 = self.data.Close[-1] - tpatr
            self.sell(sl=sl1, tp=tp1, size=self.mysize)
        
bt = Backtest(dfopt, MyStrat, cash=600, margin=1/10, commission=0.001) #0.0002
stats, heatmap = bt.optimize(slcoef=[i/10 for i in range(10, 16)],
                    TPcoef=[i/10 for i in range(10, 21)],
                    maximize='Return [%]', max_tries=300,
                        random_state=0,
                        return_heatmap=True)
stats


Results:

Start                                     0.0
End                                    3357.0
Duration                               3357.0
Exposure Time [%]                    0.268017
Equity Final [$]                   601.553629
Equity Peak [$]                    604.587289
Return [%]                           0.258938
Buy & Hold Return [%]             1701.597204
Return (Ann.) [%]                         0.0
Volatility (Ann.) [%]                     NaN
Sharpe Ratio                              NaN
Sortino Ratio                             NaN
Calmar Ratio                              0.0
Max. Drawdown [%]                   -0.501774
Avg. Drawdown [%]                    -0.33055
Max. Drawdown Duration                 1825.0
Avg. Drawdown Duration             609.666667
# Trades                                  4.0
Win Rate [%]                             50.0
Best Trade [%]                       1.917881
Worst Trade [%]                     -1.878757
Avg. Trade [%]                       0.170659
Max. Trade Duration                       4.0
Avg. Trade Duration                      1.25
Profit Factor                        1.364443
...
SQN                                  0.302106
_strategy                 MyStrat(slcoef=1...
_equity_curve                       Equity...
_trades                      Size  EntryBa...
dtype: object
